
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.InputMismatchException;
import java.awt.Color;
import static java.awt.Color.RED;
import static java.awt.Color.BLACK;
import java.util.Set;
import java.util.HashSet;

public class C_A_plus_B_plus_C {

    static Scanner in = new Scanner(System.in);

    static int n, m, l, q;

    static int a[], b[], c[], x[];

    static void solve() {

        //Tree<Integer> summation = new RedBlack<>();
        Set<Integer> set = new HashSet<>();

        for (int i = 0; i < n; ++i) {

            for (int j = 0; j < m; ++j) {

                for (int k = 0; k < l; ++k) {

                    int value = a[i] + b[j] + c[k];

                    //summation.add(value);
                    set.add((int) value);

                }

            }

        }

        //summation.visit();
        StringBuilder ans = new StringBuilder();

        for (int index = 0; index != q; ++index) {

            boolean present = false;

            /*if (summation.present(x[index])) {

                present = true;

            }*/
            if (set.contains((int) x[index])) {

                present = true;

            }

            if (present) {

                ans.append("Yes").append("\n");

            } else {

                ans.append("No").append("\n");

            }

        }

        System.out.print(ans.toString());

    }

    public static void main(String[] args) {

        input();
        solve();

    }

    private static void input() {

        n = in.nextInt();

        a = new int[n];

        for (int i = 0; i != n; ++i) {

            a[i] = in.nextInt();

        }

        m = in.nextInt();

        b = new int[m];

        for (int i = 0; i != m; ++i) {

            b[i] = in.nextInt();

        }

        l = in.nextInt();

        c = new int[l];

        for (int i = 0; i != l; ++i) {

            c[i] = in.nextInt();

        }

        q = in.nextInt();

        x = new int[q];

        for (int i = 0; i != q; ++i) {

            x[i] = in.nextInt();

        }

    }

    private static class Element implements Comparable<Element> {

        long value = Long.MAX_VALUE;
        int index;

        public Element(long value) {

            this.value = value;

        }

        public Element(int index) {
            this.index = index;
        }

        public Element(long value, int index) {
            this.value = value;
            this.index = index;
        }

        @Override
        public String toString() {
            return value + "";
        }

        @Override
        public int compareTo(Element e) {

            if (this.value > e.value) {

                return 1;

            } else if (this.value < e.value) {

                return -1;

            }

            return 0;

        }

        @Override
        public int hashCode() {
            int hash = 7;
            hash = 29 * hash + (int) (this.value ^ (this.value >>> 32));
            return hash;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final Element other = (Element) obj;
            return this.value == other.value;
        }

    }

    private static class Node<T extends Comparable<T>> {

        T data;
        Node<T> left, right, parent;

        Color color = RED;

        public Node(T data) {
            this.data = data;
        }

        public T getData() {
            return data;
        }

        public void setData(T data) {
            this.data = data;
        }

        public Node<T> getLeft() {
            return left;
        }

        public void setLeft(Node<T> left) {
            this.left = left;
        }

        public Node<T> getRight() {
            return right;
        }

        public void setRight(Node<T> right) {
            this.right = right;
        }

        public Node<T> getParent() {
            return parent;
        }

        public void setParent(Node<T> parent) {
            this.parent = parent;
        }

        public Color getColor() {
            return color;
        }

        public void setColor(Color color) {
            this.color = color;
        }

        public boolean isLeft() {

            return parent != null && parent.getLeft() == this;

        }

        public void flipColor() {

            setColor(getColor() == RED ? BLACK : RED);

        }

    }

    private interface Tree<T extends Comparable<T>> {

        Tree<T> add(T data);

        Tree<T> delete(T data);

        T getMax();

        T getMin();

        void visit();

        public T get(T data);

        boolean present(T data);

    }

    private static class RedBlack<T extends Comparable<T>> implements Tree<T> {

        Node<T> root;

        @Override
        public Tree<T> add(T data) {

            Node<T> node = new Node<>(data);

            root = add(root, node);

            applyRotationAndReColoring(node);

            return this;

        }

        private Node<T> add(Node<T> node, Node<T> addedNode) {

            if (isEmpty(node)) {

                return addedNode;

            }

            if (addedNode.getData().compareTo(node.getData()) < 0) {

                node.setLeft(add(node.getLeft(), addedNode));

                //if (!isEmpty(node.getLeft())) {
                node.getLeft().setParent(node);

                //}
            } else if (addedNode.getData().compareTo(node.getData()) > 0) {

                node.setRight(add(node.getRight(), addedNode));

                //if (!isEmpty(node.getRight())) {
                node.getRight().setParent(node);

                //}
            }

            return node;

        }

        @Override
        public Tree<T> delete(T data) {

            if (isEmpty()) {

                return this;

            }

            root = delete(root, data);

            applyRotationAndReColoring(root);

            return this;

        }

        private Node<T> delete(Node<T> node, T data) {

            if (isEmpty(node)) {

                return null;

            } else if (data.compareTo(node.getData()) < 0) {

                try {

                    node.setLeft(delete(node.getLeft(), data));

                    if (!isEmpty(node.getLeft())) {

                        node.getLeft().setParent(node);

                    }

                } catch (Exception e) {

                }

            } else if (data.compareTo(node.getData()) > 0) {

                try {

                    node.setRight(delete(node.getRight(), data));

                    if (!isEmpty(node.getRight())) {

                        node.getRight().setParent(node);

                    }

                } catch (Exception e) {

                }

            } else {

                if (isEmpty(node.getLeft())) {

                    return node.getRight();

                } else if (isEmpty(node.getRight())) {

                    return node.getLeft();

                }

                try {

                    node.setData(getMax(node.getLeft()));
                    node.setLeft(delete(node.getLeft(), node.getData()));

                    if (!isEmpty(node.getLeft())) {

                        node.getLeft().setParent(node);

                    }

                } catch (Exception e) {

                }

            }

            //applyRotationAndReColoring(node);
            return node;

        }

        private void applyRotationAndReColoring(Node<T> node) {

            if (isEmpty(node)) {

                //root.setColor(BLACK);
                return;

            }

            Node<T> parent = node.getParent();

            if (!isEmpty(parent) && parent.getColor() == RED) {

                Node<T> grandParent = node.getParent().getParent();

                if (isEmpty(grandParent)) {

                    root.setColor(BLACK);
                    return;

                }

                Node<T> uncle = parent.isLeft() ? grandParent.getRight() : grandParent.getLeft();

                if (!isEmpty(uncle) && uncle.getColor() == RED) {

                    applyReColoring(parent, uncle, grandParent);

                } else if (parent.isLeft()) {

                    leftSitution(node, parent, grandParent);

                } else if (!parent.isLeft()) {

                    rightSitution(node, parent, grandParent);

                }

            }

            root.setColor(RED);

        }

        private void applyReColoring(Node<T> parent, Node<T> uncle, Node<T> grandParent) {

            parent.flipColor();
            uncle.flipColor();
            grandParent.flipColor();

            applyRotationAndReColoring(grandParent);

        }

        private void leftSitution(Node<T> node, Node<T> parent, Node<T> grandParent) {

            if (!node.isLeft()) {

                rotateLeft(parent);

            }

            parent.flipColor();
            grandParent.flipColor();

            rotateRight(grandParent);

            applyRotationAndReColoring(node.isLeft() ? parent : grandParent);

        }

        private void rightSitution(Node<T> node, Node<T> parent, Node<T> grandParent) {

            if (node.isLeft()) {

                rotateRight(parent);

            }

            parent.flipColor();
            grandParent.flipColor();

            rotateLeft(grandParent);

            applyRotationAndReColoring(node.isLeft() ? grandParent : parent);

        }

        private void rotateLeft(Node<T> node) {

            Node<T> right = node.getRight();
            Node<T> centerNode = node.getRight().getLeft();

            node.setRight(centerNode);

            if (!isEmpty(node.getRight())) {

                node.getRight().setParent(node);

            }

            right.setLeft(node);
            //node.setRight(centerNode);

            right.setParent(node.getParent());
            //node.setParent(right);

            updateChildOfParent(node, right);

            node.setParent(right);

        }

        private void rotateRight(Node<T> node) {

            Node<T> left = node.getLeft();
            Node<T> centerNode = node.getLeft().getRight();

            node.setLeft(centerNode);

            if (!isEmpty(node.getLeft())) {

                node.getLeft().setParent(node);

            }

            left.setRight(node);
            //node.setLeft(centerNode);

            left.setParent(node.getParent());
            //node.setParent(left);

            updateChildOfParent(node, left);

            node.setParent(left);

        }

        private void updateChildOfParent(Node<T> node, Node<T> tempNode) {

            if (isEmpty(node.getParent())) {

                root = tempNode;

            } else if (node.isLeft()) {

                node.getParent().setLeft(tempNode);

            } else if (!node.isLeft()) {

                node.getParent().setRight(tempNode);

            }

        }

        @Override
        public boolean present(T data) {

            if (isEmpty()) {

                return false;

            }

            find = false;

            present(root, data);

            return find;

        }

        private void present(Node<T> node, T data) {

            if (isEmpty(node)) {

                return;

            }

            present(node.getLeft(), data);

            if (node.getData().equals((data))) {

                find = true;
                return;

            }

            present(node.getRight(), data);

        }

        @Override
        public T getMax() {

            if (isEmpty()) {

                return null;

            }

            return getMax(root);

        }

        private T getMax(Node<T> node) {

            if ((isEmpty(node))) {

                return null;

            }

            if (!isEmpty(node.getRight())) {

                return getMax(node.getRight());

            }

            return node.getData();

        }

        @Override
        public T getMin() {

            if (isEmpty()) {

                return null;

            }

            return getMin(root);

        }

        private T getMin(Node<T> node) {

            if (!isEmpty(node.getLeft())) {

                return getMin(node.getLeft());

            }

            return node.getData();

        }

        @Override
        public void visit() {

            if (isEmpty()) {

                return;

            }

            inOrder(root);

            System.out.println();

        }

        private void inOrder(Node<T> node) {

            if (isEmpty(node)) {

                return;

            }

            inOrder(node.getLeft());

            System.out.print(node.getData() + " ");

            inOrder(node.getRight());

        }

        T searchData;

        @Override
        public T get(T data) {

            if (isEmpty()) {

                return null;

            }

            find = false;

            //searchData = null;
            get(new Node<>(data), root);

            return searchData;

        }

        boolean find = false;

        private void get(Node<T> search, Node<T> node) {

            if (isEmpty(node)) {

                return;

            }

            get(search, node.getLeft());

            if (node.getData().equals(search.getData())) {

                //System.out.println("match for " + node.getData() + " " + search.getData());
                find = true;

                //System.out.println("here");
                searchData = node.getData();

            }

            if (find) {

                return;

            }

            //System.out.println("continue after return");
            get(search, node.getRight());

        }

        private boolean isEmpty() {

            return isEmpty(root);

        }

        private boolean isEmpty(Node<T> node) {

            return node == null;

        }

    }

    static class OutputWriter {

        private final PrintWriter writer;

        public OutputWriter(OutputStream outputStream) {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
        }

        public OutputWriter(Writer writer) {
            this.writer = new PrintWriter(writer);
        }

        public void print(Object... objects) {
            for (int i = 0; i < objects.length; i++) {
                if (i != 0) {
                    writer.print(' ');
                }
                writer.print(objects[i]);
            }
        }

        public void println(Object... objects) {
            print(objects);
            writer.println();
        }

        public void println() {
            writer.println();
        }

        public void print(long[] array) {
            for (int i = 0; i < array.length; i++) {
                if (i != 0) {
                    writer.print(' ');
                }
                writer.print(array[i]);
            }
        }

        public void separateLines(int[] array) {
            for (int i : array) {
                println(i);
            }
        }

        public void close() {
            writer.close();
        }

        public void flush() {
            writer.flush();
        }

    }

    static class Scanner {

        private final InputStream stream;
        private final byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private SpaceCharFilter filter;

        public Scanner(InputStream stream) {
            this.stream = stream;
        }

        public int read() {
            if (numChars == -1) {
                throw new InputMismatchException();
            }
            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                } catch (IOException e) {
                    throw new InputMismatchException();
                }
                if (numChars <= 0) {
                    return -1;
                }
            }
            return buf[curChar++];
        }

        public int peek() {
            if (numChars == -1) {
                return -1;
            }
            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                } catch (IOException e) {
                    return -1;
                }
                if (numChars <= 0) {
                    return -1;
                }
            }
            return buf[curChar];
        }

        public int nextInt() {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            int sum = 0;
            do {
                if (c < '0' || c > '9') {
                    throw new InputMismatchException();
                }
                sum *= 10;
                sum += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return sum * sgn;
        }

        public long nextLong() {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            long sum = 0;
            do {
                if (c < '0' || c > '9') {
                    throw new InputMismatchException();
                }
                sum *= 10;
                sum += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return sum * sgn;
        }

        public String next() {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            StringBuilder sum = new StringBuilder();
            do {
                if (Character.isValidCodePoint(c)) {
                    sum.appendCodePoint(c);
                }
                c = read();
            } while (!isSpaceChar(c));
            return sum.toString();
        }

        public boolean isSpaceChar(int c) {
            if (filter != null) {
                return filter.isSpaceChar(c);
            }
            return isWhitespace(c);
        }

        public static boolean isWhitespace(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }

        private String readLine0() {
            StringBuilder buf = new StringBuilder();
            int c = read();
            while (c != '\n' && c != -1) {
                if (c != '\r') {
                    buf.appendCodePoint(c);
                }
                c = read();
            }
            return buf.toString();
        }

        public String readLine() {
            String s = readLine0();
            while (s.trim().length() == 0) {
                s = readLine0();
            }
            return s;
        }

        public String readLine(boolean ignoreEmptyLines) {
            if (ignoreEmptyLines) {
                return readLine();
            } else {
                return readLine0();
            }
        }

        public String nextLine() {
            return readLine();
        }

        public char nextCharacter() {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            return (char) c;
        }

        public double nextDouble() {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            double sum = 0;
            while (!isSpaceChar(c) && c != '.') {
                if (c == 'e' || c == 'E') {
                    return sum * Math.pow(10, nextInt());
                }
                if (c < '0' || c > '9') {
                    throw new InputMismatchException();
                }
                sum *= 10;
                sum += c - '0';
                c = read();
            }
            if (c == '.') {
                c = read();
                double m = 1;
                while (!isSpaceChar(c)) {
                    if (c == 'e' || c == 'E') {
                        return sum * Math.pow(10, nextInt());
                    }
                    if (c < '0' || c > '9') {
                        throw new InputMismatchException();
                    }
                    m /= 10;
                    sum += (c - '0') * m;
                    c = read();
                }
            }
            return sum * sgn;
        }

        public boolean isExhausted() {
            int value;
            while (isSpaceChar(value = peek()) && value != -1) {
                read();
            }
            return value == -1;
        }

        public SpaceCharFilter getFilter() {
            return filter;
        }

        public void setFilter(SpaceCharFilter filter) {
            this.filter = filter;
        }

        public interface SpaceCharFilter {

            public boolean isSpaceChar(int ch);
        }

        public int[] nextIntArray(int n) {
            int[] array = new int[n];
            for (int i = 0; i < n; ++i) {
                array[i] = nextInt();
            }
            return array;
        }

        public int[] nextSumIntArray(int n) {
            int[] array = new int[n];
            array[0] = nextInt();
            for (int i = 1; i < n; ++i) {
                array[i] = array[i - 1] + nextInt();
            }
            return array;
        }

        public long[] nextLongArray(int n) {
            long[] array = new long[n];
            for (int i = 0; i < n; ++i) {
                array[i] = nextLong();
            }
            return array;
        }

        public long[] nextSumLongArray(int n) {
            long[] array = new long[n];
            array[0] = nextInt();
            for (int i = 1; i < n; ++i) {
                array[i] = array[i - 1] + nextInt();
            }
            return array;
        }

    }

}
