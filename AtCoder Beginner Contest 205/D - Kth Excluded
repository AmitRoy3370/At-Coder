import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Collections;
import java.util.StringTokenizer;
import java.util.Vector;

public class Main {

      static Scanner in=new Scanner();
    static PrintWriter out=new PrintWriter(System.out);
    
    static int n,q;
    
    static long a[],k[];
    
    static class Pair implements Comparable<Pair> {
        
        long element;
        long index;

        public Pair(long element, long index) {
            this.element = element;
            this.index = index;
        }

        @Override
        public int compareTo(Pair t) {
        //    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
        if(this.element>t.element){
            
            return 1;
            
        }else if(this.element<t.element){
            
            return -1;
            
        }
        
        return 0;
        
        }
        
    }
    
    static void solve(){
        
        Pair p[]=new Pair[q];
        
        for(int i=0;i<q;i++){
            
            p[i]=new Pair(k[i],i);
            
        }
        
        Arrays.sort(p);
        
        Vector<Pair> ans=new Vector<>();
        
        int x=0,z=0;
        
        for(int i=0;i<q;i++){
            
            long first=p[i].element;
            long second=p[i].index;
            
            while(x<n && a[x]<=first+z ){
                
                z++;
                x++;
                
            }
            
            ans.add(new Pair(second,first+z));
            
        }
        
       Collections.sort(ans);
        
       for(int i=0;i<q;i++){
           
           out.println(ans.get(i).index);
           out.flush();
           
       }
       
    }
    
    public static void main(String[] amit) throws IOException {
        
        n=in.nextInt();
        q=in.nextInt();
        
        a=new long[n];
        k=new long[q];
        
        for(int i=0;i<n;i++){
            
            a[i]=in.nextLong();
            
        }
        
        for(int i=0;i<q;i++){
            
            k[i]=in.nextLong();
            
        }
        
       solve();
        
    }
    
     static class Scanner{
        
        BufferedReader in;
        StringTokenizer st;

        public Scanner() {
        
            in=new BufferedReader(new InputStreamReader(System.in));
            
        }
        
        String next() throws IOException{
            
            while(st==null || !st.hasMoreElements()){
                
                st=new StringTokenizer(in.readLine());
                
            }
            
            return st.nextToken();
            
        }
        
        int nextInt() throws IOException{
            
            return Integer.parseInt(next());
            
        }
        
        long nextLong() throws IOException{
            
            return Long.parseLong(next());
            
        }
        
        double nextDouble() throws IOException{
            
            return Double.parseDouble(next());
            
        }
        
        String nextLine() throws IOException{
            
            return in.readLine();
            
        }
    }    
    
}
